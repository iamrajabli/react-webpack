{
  "compilerOptions": {
    "outDir": "./dist/",
    "noImplicitAny": true,
    "module": "ESNext",
    "target": "es5",
    "jsx": "react-jsx",
    "allowJs": true,
    "moduleResolution": "node",
    "baseUrl": ".",
    "paths": {
      "*": ["./src/*"],
      "shared": ["./src/shared/*"],
      "widgets": ["./src/widgets/*"],
      "components": ["./src/components/*"],
      "app": ["./src/app/*"],
      "featues": ["./src/featues/*"],
      "pages": ["./src/pages/*"],
      "config": ["./config/*"]
    },

    // The above sample assumes version >= 2.7 or newer of TypeScript is used with the new esModuleInterop and allowSyntheticDefaultImports compiler options in your tsconfig.json file.
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true
  },

  // Note that you'll also need to check your tsconfig.json file. If the module in compilerOptions in tsconfig.json is commonjs, the setting is complete, else webpack will fail with an error. This occurs because ts-node does not support any module syntax other than commonjs.

  // There are three solutions to this issue:
  // Modify tsconfig.json.
  // Modify tsconfig.json and add settings for ts-node.
  // Install tsconfig-paths.
  // The first option is to open your tsconfig.json file and look for compilerOptions. Set target to "ES5" and module to "CommonJS" (or completely remove the module option).

  // The second option is to add settings for ts-node:

  // You can keep "module": "ESNext" for tsc, and if you use webpack, or another build tool, set an override for ts-node. ts-node config
  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS"
    }
  }
}
